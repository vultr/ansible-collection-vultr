# Copyright (c) 2021, RenÃ© Moser <mail@renemoser.net>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: setup
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    state: absent

- name: test fail if missing name
  vultr.cloud.dns_domain:
  register: result
  ignore_errors: true
- name: verify test fail if missing name
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "missing required arguments: domain"'

- name: test fail if missing params for state=present
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
  register: result
  ignore_errors: true
- name: verify fail if missing params for state=present
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "state is present but all of the following are missing: ip"'

- name: test create dns domain in check mode
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: enabled
    server_ip: 10.10.10.10
  register: result
  check_mode: true
- name: verify test create dns domain in check mode
  ansible.builtin.assert:
    that:
      - result is changed

- name: test create dns domain
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: enabled
    server_ip: 10.10.10.10
  register: result
- name: verify test create dns domain
  ansible.builtin.assert:
    that:
      - result is changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name
      - result.vultr_dns_domain.dns_sec == 'enabled'

- name: test create dns domain idempotence
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: enabled
    server_ip: 10.10.10.10
  register: result
- name: verify test create dns domain idempotence
  ansible.builtin.assert:
    that:
      - result is not changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name
      - result.vultr_dns_domain.dns_sec == 'enabled'

- name: test update dns domain in check mode
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: disabled
    server_ip: 10.10.10.10
  register: result
  check_mode: true
- name: verify test create dns domain in check mode
  ansible.builtin.assert:
    that:
      - result is changed
      - result.vultr_dns_domain.dns_sec == 'enabled'

- name: test update dns domain
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: disabled
    server_ip: 10.10.10.10
  register: result
- name: verify test create dns domain
  ansible.builtin.assert:
    that:
      - result is changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name
      - result.vultr_dns_domain.dns_sec == 'disabled'

- name: test update dns domain idempotence
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    dns_sec: disabled
    server_ip: 10.10.10.10
  register: result
- name: verify test create dns domain idempotence
  ansible.builtin.assert:
    that:
      - result is not changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name
      - result.vultr_dns_domain.dns_sec == 'disabled'

- name: test absent dns domain in check mode
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    state: absent
  register: result
  check_mode: true
- name: verify test absent dns domain in check mode
  ansible.builtin.assert:
    that:
      - result is changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name

- name: test absent dns domain
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    state: absent
  register: result
- name: verify test absent dns domain
  ansible.builtin.assert:
    that:
      - result is changed
      - result.vultr_dns_domain.domain == vultr_dns_domain_name

- name: test absent dns domain idempotence
  vultr.cloud.dns_domain:
    name: "{{ vultr_dns_domain_name }}"
    state: absent
  register: result
- name: verify test absent dns domain idempotence
  ansible.builtin.assert:
    that:
      - result is not changed
